---
- hosts: all
  become: true
  tasks:
    - name: copy script hosts
      copy:
        src: script/hosts.sh 
        dest: /etc/profile.d/hosts.sh
        owner: vagrant
        group: vagrant
        mode: '0770'

    - name: the hosts converted to variables
      shell: |
        source /etc/profile.d/hosts.sh
      args:
        chdir: /etc/profile.d/
        executable: /bin/bash

    - name: Directory
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        owner: root
        group: root 
        mode: 0700
      with_items:
        - /etc/etcd 
        - /var/lib/etcd
        - /var/lib/k8s
        - /usr/local/bin/etcd

    - name: Make direcories
      file:
        path: "{{ item }}"
        owner: root
        group: root 
        mode: 0700
        state: touch
      with_items:
        - /etc/systemd/system/etcd.service
        - /etc/modules-load.d/crio.conf
        - /etc/sysctl.d/cri.conf
        - /home/vagrant/encryption-config.yaml

#    - name: encryption 
#      shell: head -c 32 /dev/urandom | base64 
#      register: result
#    - name: The encryption key
#      blockinfile:
#        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
#        owner: root 
#        group: root
#        mode: 0750
#        path: /var/lib/k8s/encryption-config.yaml
#        block: |
#          kind: EncryptionConfig
#          apiVersion: v1
#          resources:
#            - resources:
#              - secrets
#              providers:
#              - aescbc:
#                keys:
#                - name: key1
#                  secret: {{ result.stdout  }}
#              - identity: {}
#
#    - name: install Golang upstream
#      unarchive:
#        src: https://dl.google.com/go/go1.20.1.linux-amd64.tar.gz
#        dest: /usr/local/
#        remote_src: True
#    - name: Set custom Golang path root
#      blockinfile: 
#        path: /root/.bashrc
#        block: |
#          export GOPATH=/home/vagrant/go
#          export GOBIN=$GOPATH/bin
#          export GOROOT=/usr/local/go
#          export PATH=$PATH:$GOBIN:$GOROOT/bin
#    - name: Set Custom Golang path User
#      blockinfile: 
#        path: /home/vagrant/.bashrc
#        block: |
#          export GOPATH=/home/vagrant/go
#          export GOBIN=$GOPATH/bin
#          export GOROOT=/usr/local/go
#          export PATH=$PATH:$GOBIN:$GOROOT/bin
#    - name: link golang
#      file: src=/usr/local/go/bin/go dest=/bin/go state=link
#
#    - name: Install a list of packages
#      apt:
#        state: present
#        update_cache: yes
#        cache_valid_time: 86400
#        pkg:
#        - ca-certificates
#        - curl
#        - wget
#        - gnupg-agent
#        - software-properties-common
#        - apt-transport-https
#        - socat
#        - conntrack
#        - ipset
#        - golang-cfssl
#
#    - name: Copy encription 
#      command: uname -n
#      register: result
#    - name: copy encryption
#      copy:
#        src: script/cert/
#        dest: "{{ item }}"
#        owner: vagrant
#        group: vagrant
#        mode: 0750
#      with_items:
#        - '/etc/etcd/kubernetes-key.pem'
#        - '/etc/etcd/kubernetes.pem'
#        - '/etc/etcd/ca.pem'
#
#    - name: Remove swapfile from /etc/fstab
#      mount:
#        name: "{{ item }}"
#        fstype: swap
#        state: absent
#      with_items:
#        - swap
#        - none
#    - name: Disable swap
#      command: swapoff -a
#    - name: Forwarding overlay VxLan
#      blockinfile: 
#        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
#        owner: root 
#        group: root
#        mode: 0700
#        path: /etc/modules-load.d/crio.conf
#        block: |
#          overlay
#          br_netfilter
#    - name: enable overlayFS & VxLan
#      shell: |
#        sudo modprobe overlay
#        sudo modprobe br_netfilter
#    - name: add configuration
#      blockinfile: 
#        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
#        owner: root
#        group: root
#        mode: 0700
#        path: /etc/sysctl.d/cri.conf
#        block: |
#          net.bridge.bridge-nf-call-iptables = 1
#          net.ipv4.ip_forward = 1
#          net.bridge.bridge-nf-call-ip6tables = 1
#    - name: Reload parameters
#      command: sudo sysctl --system

    - name: install etcd 
      shell: |
        rm -f /usr/local/bin/etcd-v3.5.7-linux-amd64.tar.gz 
        rm -f /usr/local/bin/etcd-v3.5.7-linux-amd64 
        curl -L https://github.com/etcd-io/etcd/releases/download/v3.5.7/etcd-v3.5.7-linux-amd64.tar.gz -o /usr/local/bin/etcd-v3.5.7-linux-amd64.tar.gz 
        tar xzvf /usr/local/bin/etcd-v3.5.7-linux-amd64.tar.gz -C /usr/local/bin/
        rm -f /usr/local/bin/etcd-v3.5.7-linux-amd64.tar.gz

    - name: path etcd etcdctl etcdutl
      shell: |
        /usr/local/bin/etcd-v3.5.7-linux-amd64/etcd --version
        /usr/local/bin/etcd-v3.5.7-linux-amd64/etcdctl version
        /usr/local/bin/etcd-v3.5.7-linux-amd64/etcdutl version
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcd"' >> /home/vagrant/.bashrc
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcd"' >> /root/.bashrc
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcdctl"' >> /home/vagrant/.bashrc
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcdctl"' >> /root/.bashrc
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcdutl"' >> /home/vagrant/.bashrc
        echo 'export PATH="$PATH:/usr/local/bin/etcd-v3.5.7-linux-amd64/etcdutl"' >> /root/.bashrc
    - name: source path etcd etcdctl etcdutl
      shell: |
        source /home/vagrant/.bashrc
        source /root/.bashrc
      args:
        executable: /bin/bash

    - name: config etcd etcdctl etcdutl
      shell: |
        /usr/local/bin/etcd-v3.5.7-linux-amd64/etcd \
         	--data-dir '/var/lib/etcd' \
         	--listen-client-urls 'https://192.168.56.11:2379,https://127.0.0.1:2379' \
         	--advertise-client-urls 'https://192.168.56.11:2379' \
         	--listen-peer-urls 'https://192.168.56.11:2380' \
         	--initial-advertise-peer-urls 'https://192.168.56.11:2380' \
         	--initial-cluster 'K8SETCD11=https://192.168.56.11:2380,K8SETCD12=https://192.168.56.12:2380,K8SETCD13=https://192.168.56.13:2380,K8SETCD14=https://192.168.56.14:2380,K8SETCD15=https://192.168.56.15:2380,K8SETCD16=https://192.168.56.16:2380,K8SETCD17=https://192.168.56.17:2380,K8SETCD18=https://192.168.56.18:2380' \
         	--initial-cluster-token 'ETCD-kyber' \
         	--initial-cluster-state 'new' \
         	--name '$(hostname -s)' \
         	--cert-file '/etc/etcd/kubernetes.pem' \
         	--key-file '/etc/etcd/kubernetes-key.pem' \
         	--peer-cert-file '/etc/etcd/kubernetes.pem' \
         	--peer-key-file '/etc/etcd/kubernetes-key.pem' \
         	--trusted-ca-file '/etc/etcd/ca.pem' \
         	--peer-trusted-ca-file '/etc/etcd/ca.pem' \
         	--peer-client-cert-auth 'true' \
         	--client-cert-auth 'true'
      args:
        chdir: /usr/local/bin/etcd-v3.5.7-linux-amd64
        executable: /usr/local/bin/etcd-v3.5.7-linux-amd64/etcd
          
#        repo: 'https://github.com/etcd-io/etcd.git'
#        dest: /usr/local/bin/etcd
#    - name: stat etcd
#      stat: 
#        path: /usr/local/bin/etcd-v3.4.24-linux-amd64
#        register: etcd_stat
#    - name: rename
#      copy: force=false remote_src=false src=/usr/local/bin/etcd-v3.4.24-linux-amd64 dest=/usr/local/bin/etcd

#    - name: The etcd.service 
#      blockinfile:
#        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
#        owner: root
#        group: root
#        mode: 0700
#        path: /etc/systemd/system/etcd.service
#        block: |
#          [Unit]
#          Description=etcd key-value store
#          Documentation=https://github.com/etcd-io/etcd
#          After=network-online.target local-fs.target remote-fs.target time-sync.target
#          Wants=network-online.target local-fs.target remote-fs.target time-sync.target
#
#          [Service]
#          User=etcd
#          Type=notify
#          Environment=ETCD_DATA_DIR=/var/lib/etcd
#          Environment=ETCD_NAME=%m
#          ExecStart=/usr/bin/etcd
#          Restart=always
#          RestartSec=10s
#          LimitNOFILE=40000
#
#          [Install]
#          WantedBy=multi-user.target
#
#    - name: 
#      systemd:
#        deamon_reload: true
#        name: etcd
#        masked: no
#        state: started
#        enabled: yes
#
#    - name: Verification etcd
#      shell: |
#        sudo ETCDCTL_API=3 etcdctl member list \
#          --endpoints=https://127.0.0.1:2379 \
#          --cacert=/etc/etcd/ca.pem \
#          --cert=/etc/etcd/kubernetes.pem \
#          --key=/etc/etcd/kubernetes-key.pem
#    - name: verification env
#      shell: |
#        env
...

#          [Unit]
#          Description=etcd
#          Documentation=https://github.com/coreos
#          Conflicts=etcd.service
#          Conflicts=etcd2.service
#          
#          [Service]
#          Type=notify
#          Restart=always
#          RestartSec=5s
#          LimitNOFILE=40000
#          TimeoutStartSec=0
#
#          ExecStart=/usr/local/bin/etcd
#            --data-dir=/var/lib/etcd
#            --listen-client-urls=https://192.168.56.11:2379,https://127.0.0.1:2379
#            --advertise-client-urls=https://192.168.56.11:2379
#            --listen-peer-urls=https://192.168.56.11:2380
#            --initial-advertise-peer-urls=https://192.168.56.11:2380
#            --initial-cluster=K8SETCD11=https://192.168.56.11:2380,K8SETCD12=https://192.168.56.12:2380,K8SETCD13=https://192.168.56.13:2380,K8SETCD14=https://192.168.56.14:2380,K8SETCD15=https://192.168.56.15:2380,K8SETCD16=https://192.168.56.16:2380,K8SETCD17=https://192.168.56.17:2380,K8SETCD18=https://192.168.56.18:2380
#            --initial-cluster-token=ETCD-kyber
#            --initial-cluster-state=new
#            --name ETCD_NAME
#            --cert-file=/etc/etcd/kubernetes.pem
#            --key-file=/etc/etcd/kubernetes-key.pem
#            --peer-cert-file=/etc/etcd/kubernetes.pem
#            --peer-key-file=/etc/etcd/kubernetes-key.pem
#            --trusted-ca-file=/etc/etcd/ca.pem
#            --peer-trusted-ca-file=/etc/etcd/ca.pem
#            --peer-client-cert-auth
#            --client-cert-auth
#          Restart=on-failure
#          RestartSec=5
#          [Install]
#          WantedBy=multi-user.target
#    - name: etcd.service
#      shell: |
#        export ETCD_NAME=$(hostname -s)
#        sudo sed -i s/ETCD_NAME/$ETCD_NAME/g /etc/systemd/system/etcd.service

---
- hosts: all
  become: true
  vars:
    - csrjson: -csr.json
    - keypem: -key.pem
    - pem: .pem
    - csr: .csr
  tasks:
    - name: copy script hosts
      copy:
        src: script/hosts.sh 
        dest: /etc/profile.d/hosts.sh
        owner: vagrant
        group: vagrant
        mode: '0770'

    - name: the hosts converted to variables
      shell: |
            source /etc/profile.d/hosts.sh
      args:
        chdir: /home/vagrant
        executable: /bin/bash

    - name: install Golang upstream
      unarchive:
        src: https://dl.google.com/go/go1.20.1.linux-amd64.tar.gz
        dest: /usr/local/
        remote_src: True
    - name: Set custom Golang path root
      blockinfile: 
        path: /root/.bashrc
        block: |
          export GOPATH=/home/vagrant/go
          export GOBIN=$GOPATH/bin
          export GOROOT=/usr/local/go
          export PATH=$PATH:$GOBIN:$GOROOT/bin
    - name: Set Custom Golang path User
      blockinfile: 
        path: /home/vagrant/.bashrc
        block: |
          export GOPATH=/home/vagrant/go
          export GOBIN=$GOPATH/bin
          export GOROOT=/usr/local/go
          export PATH=$PATH:$GOBIN:$GOROOT/bin
    - name: link golang
      file: src=/usr/local/go/bin/go dest=/bin/go state=link

    - name: Directory
      file:
        path: "{{ item }}"
        state: directory
        recurse: true
        owner: vagrant
        group: root
        mode: 0770
      with_items:
        - /home/vagrant/script
        - /etc/k8s/cert
        - /etc/k8s/config
        - /var/lib/k8s
        - /var/lib/kubelet/kubeconfig
        - /var/lib/kube-proxy
        - /van/run/kubernetes
        - /home/vagrant/go
        - /opt/cni/bin
        - /etc/cni/net.d
        - /etc/crio

    - name: Var Hostname
      command: uname -n
      register: result
    - name: Make direcories
      file:
        path: "{{ item }}"
        state: touch
      with_items:
        - /etc/systemd/system/kubelet.service
        - /var/lib/kube-proxy/kube-proxy-config.yaml
        - /etc/systemd/system/kube-proxy.service
        - /var/lib/kubelet/kubelet-config.yaml
        - /etc/modules-load.d/crio.conf
        - /etc/sysctl.d/cri.conf
        - /var/lib/kube-proxy/kubeconfig
        - /etc/systemd/system/crio.service
        - /home/vagrant/script/mv_cert.sh
        - /etc/cni/net.d/99-looback.conflist
        - /etc/cni/net.d/10-bridge.conflist

    - name: enable cri-repo
      environment:
        OS: xUbuntu_20.04 
        VERSION: 1.26
      shell: |
        echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/cri-o:$OS.list
        echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/cri-o:$VERSION.list
        curl -L   https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/Release.key | apt-key add -
        curl -L   https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o/$OS/Release.key | apt-key add -

    - name: Install a list of packages
      apt:
        state: present
        update_cache: yes
        cache_valid_time: 86400
        pkg:
        - ca-certificates
        - curl
        - wget
        - gnupg-agent
        - software-properties-common
        - apt-transport-https
        - socat
        - conntrack
        - ipset
        - cri-o
        - cri-o-runc
        - cri-tools
        - golang-cfssl

    - name: install cni
      unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
        dest: /opt/cni/bin
        remote_src: yes
    - name: install kubectl kube-proxy kubelet
      get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.26.0/bin/linux/amd64/{{ item }}"
        dest: /usr/local/bin/
        mode: 0750
      with_items:
        - kubelet
        - kube-proxy
        - kubectl

    - name: var hostname copy encryption 
      command: uname -n
      register: result
    - name: copy encryption
      copy:
        src: script/cert/
        dest: "{{ item }}"
        owner: vagrant
        group: vagrant
        mode: 0750
      with_items:
        - '/var/lib/kubelet/{{ result.stdout }}-key.pem'
        - '/var/lib/kubelet/{{ result.stdout }}.pem'
        - '/var/lib/kubelet/{{ result.stdout }}-csr.json'
        - '/var/lib/kubelet/{{ result.stdout }}.csr'
        - '/var/lib/kubelet/kubeconfig/{{ result.stdout  }}.kubeconfig'
        - '/var/lib/kubelet/ca.pem'

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none
    - name: Disable swap
      command: swapoff -a
    - name: Forwarding overlay VxLan
      blockinfile: 
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/modules-load.d/crio.conf
        block: |
          overlay
          br_netfilter
    - name: enable overlayFS & VxLan
      shell: |
        sudo modprobe overlay
        sudo modprobe br_netfilter
    - name: add configuration
      blockinfile: 
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/sysctl.d/cri.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
    - name: Reload parameters
      command: sudo sysctl --system

    - name: 10-bridge.conflist
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/cni/net.d/10-bridge.conflist
        block: |
          {
            "cniVersion": "1.0.0",
            "name": "crio",
            "plugins": [
              {
                "type": "bridge",
                "bridge": "cni0",
                "isGateway": true,
                "ipMasq": true,
                "hairpinMode": true,
                "ipam": {
                  "type": "host-local",
                  "routes": [
                      { "dst": "0.0.0.0/0" }
                  ],
                  "ranges": [
                      [{ "subnet": "{{ POD_CIDR }}"}]
                  ]
                }
              }
            ]
          }

    - name: config looback
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/cni/net.d/99-looback.conflist
        block: |
          {
            "cniVersion": "1.0.0",
            "name": "lo",
            "plugins":[
              {
                "type": "loopback"
              }
            ]
          }

    - name: tranfer crio config
      synchronize:
        src: ./fileconf/crio.conf
        dest: /etc/crio/crio.conf

    - name: Var Hostname
      command: uname -n
      register: result
    - name: Create the kuelet-config.yaml
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /var/lib/kubelet/kubelet-config.yaml
        block: |
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          authentication:
            anonymous:
              enabled: false
            webhook:
              enabled: true
            x509:
              clientCAFile: "/var/lib/k8s/ca.pem"
          authorization:
            mode: Webhook
          clusterDomain: "kyber.local"
          clusterDNS:
            - "{{ CLUSTERDNS }}"
          podCIDR: "{{ POD_CIDR }}"
          resolvConf: "/run/systemd/resolve/resolv.conf"
          runtimeRequestTimeout: "15m"
          tlsCertFile: "/var/lib/kubelet/{{ result.stdout }}.pem"
          tlsPrivateKeyFile: "/var/lib/kubelet/{{ result.stdout }}-key.pem"

    - name: Create the kubelet.service
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/systemd/system/kubelet.service
        block: |
          [Unit]
          Description=Kubernetes Kubelet
          Documentation=https://github.com/kubernetes/kubernetes
          After=crio.service
          Requires=crio.service
          [Service]
          ExecStart=/usr/local/bin/kubelet
            --config=/var/lib/kubelet/kubelet-config.yaml
            --container-runtime=remote
            --container-runtime-endpoint=unix:///var/run/crio/crio.sock
            --image-pull-progress-deadline=2m
            --kubeconfig=/var/lib/kubelet/kubeconfig
            --network-plugin=cni
            --register-node=true
            --v=2
          Restart=on-failure
          RestartSec=5
          [Install]
          WantedBy=multi-user.target

    - name: Configure the K8s Proxy
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /var/lib/kube-proxy/kube-proxy-config.yaml
        block: |
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          clientConnection:
            kubeconfig: "/var/lib/kube-proxy/kubeconfig"
          mode: "iptables"
          clusterCIDR: "{{ POD_CIDR }}"

    - name: The kube-proxy.service 
      blockinfile:
        marker: "#<!-- github.com/dczinil {mark} ansible block -->#"
        owner: vegrant
        group: vagrant
        mode: 0750
        path: /etc/systemd/system/kube-proxy.service
        block: |
          [Unit]
          Description=Kubernetes Kube Proxy
          Documentation=https://github.com/kubernetes/kubernetes
          [Service]
          ExecStart=/usr/local/bin/kube-proxy \\
            --config=/var/lib/kube-proxy/kube-proxy-config.yaml
          Restart=on-failure
          RestartSec=5
          [Install]
          WantedBy=multi-user.target

    - name: 
      systemd:
        name: "{{ item }}"
        masked: no
        state: started
        enabled: yes
      with_items:
        - crio
        - kubelet
        - kube-proxy
...
